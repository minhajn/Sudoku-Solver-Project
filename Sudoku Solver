/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.for207project;

/**
 *
 * @author mdmin
 */
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.util.Scanner;

public class SudokuSolver extends JFrame {

    private static final int SIZE = 9;
    private int[][] board = new int[SIZE][SIZE];

    private final JTextField[][] cells = new JTextField[SIZE][SIZE];

    private void readBoardFromFile(String filename) {
        try (Scanner scanner = new Scanner(new File(filename))) {
            for (int row = 0; row < SIZE; row++) {
                for (int col = 0; col < SIZE; col++) {
                    if (scanner.hasNextInt()) {
                        board[row][col] = scanner.nextInt();
                    }
                }
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "File not found: " + filename);
        }
    }

    private void displayBoard() {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                if (board[row][col] != 0) {
                    cells[row][col].setText(String.valueOf(board[row][col]));
                    cells[row][col].setEditable(false);
                } else {
                    cells[row][col].setText("");
                }
            }
        }
    }

    private void updateBoard() {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                cells[row][col].setText(String.valueOf(board[row][col]));
            }
        }
    }
    
    private boolean solveSudoku(int[][] board) {
        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                if (board[row][col] == 0) {
                    for (int num = 1; num <= SIZE; num++) {
                        if (isValid(board, row, col, num)) {
                            board[row][col] = num;
                            if (solveSudoku(board)) {
                                return true;
                            }
                            board[row][col] = 0;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    private boolean isValid(int[][] board, int row, int col, int num) {
        for (int i = 0; i < SIZE; i++) {
            if (board[row][i] == num) {
                return false;
            }
        }

        for (int i = 0; i < SIZE; i++) {
            if (board[i][col] == num) {
                return false;
            }
        }

        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = startRow; i < startRow + 3; i++) {
            for (int j = startCol; j < startCol + 3; j++) {
                if (board[i][j] == num) {
                    return false;
                }
            }
        }

        return true;
    }
    
    public SudokuSolver() {
        setTitle("Sudoku Solver Team - 40");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JPanel gridPanel = new JPanel(new GridLayout(SIZE, SIZE));

        for (int row = 0; row < SIZE; row++) {
            for (int col = 0; col < SIZE; col++) {
                cells[row][col] = new JTextField();
                cells[row][col].setHorizontalAlignment(JTextField.CENTER);
                cells[row][col].setFont(new Font("Arial", Font.BOLD, 20));
                gridPanel.add(cells[row][col]);
            }
        }

        JPanel buttonPanel = new JPanel();
        JButton solveButton = new JButton("ReSolve");
        solveButton.addActionListener(e -> {
            if (solveSudoku(board)) {
                updateBoard();
            } else {
                JOptionPane.showMessageDialog(this, "No solution exists!");
            }
        });
        buttonPanel.add(solveButton);

        add(gridPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        setSize(400, 450);
        setVisible(true);
    }

    public static void main(String[] args) {
        SudokuSolver solver = new SudokuSolver();
        solver.readBoardFromFile("D:\\NetBeans\\For207Project\\src\\main\\java\\com\\mycompany\\for207project\\sudoku.txt");
        solver.displayBoard();
    }

}
